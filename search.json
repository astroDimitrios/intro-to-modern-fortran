[{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/LICENSE.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Carpentries (Software Carpentry, Data Carpentry, Library Carpentry) instructional material made available Creative Commons Attribution license. following human-readable summary (substitute ) full legal text CC 4.0 license. free: Share—copy redistribute material medium format Adapt—remix, transform, build upon material purpose, even commercially. licensor revoke freedoms long follow license terms. following terms: Attribution—must give appropriate credit (mentioning work derived work Copyright (c) Carpentries , practical, linking https://carpentries.org/), provide link license, indicate changes made. may reasonable manner, way suggests licensor endorses use. additional restrictions—may apply legal terms technological measures legally restrict others anything license permits. understanding : Notices: comply license elements material public domain use permitted applicable exception limitation. warranties given. license may give permissions necessary intended use. example, rights publicity, privacy, moral rights may limit use material.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/LICENSE.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Except otherwise noted, example programs software provided Carpentries made available OSI-approved MIT license. Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/LICENSE.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"“Carpentries”, “Software Carpentry”, “Data Carpentry”, “Library Carpentry” respective logos registered trademarks Community Initiatives.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Content Introduction  Fortran? Understand Fortrans colourful history simple program might : Formally, Fortran program consists one lines made Fortran statements. Line breaks significant (e.g., semi-colons ; required ). Comments introduced exclamation mark !, may trail statements. program statement roughly equivalent job main() C/C++. However, note (must ) return statement. Using ftn: general format format specifier (discussed later) output-item-list comma-separated list values/variables printed standard output. format * (-called free-format) implementation allowed apply default format given type item. Consider following program (available example3.f90): example shows general way provide output. also going employ use statement import symbol (intrinsic) module iso_fortran_env. symbol output_unit identifies default standard output (cf. stdout). Modern Fortran case sensitive. Older versions required capitals, style persisted present day places. may see things modern etiquette tends regard capitals shouting, can cause strain. addition, compiler accept mixed case, additional tool required enforce style (enforcement wanted). course therefore prefers lower-case style. version program available exercise1.f90.","code":"program example1    ! An example program prints \"Hello World\" to the screen    print * , \"Hello World\"  end program example1 $ something something something print format [ , output-item-list ] program example3    use iso_fortran_env, only : output_unit    write (output_unit, *) \"Hello \", \"world\"  end program example3 PROGRAM example1    PRINT *, \"Hello World\"  END PROGRAM example1"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"simple program might : Formally, Fortran program consists one lines made Fortran statements. Line breaks significant (e.g., semi-colons ; required ). Comments introduced exclamation mark !, may trail statements. program statement roughly equivalent job main() C/C++. However, note (must ) return statement. Using ftn:","code":"program example1    ! An example program prints \"Hello World\" to the screen    print * , \"Hello World\"  end program example1 $ something something something"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/aio.html","id":"compiling-your-first-program","dir":"","previous_headings":"","what":"Compiling your first program","title":null,"text":"Check now can compile run first example program example1.f90.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/aio.html","id":"formal-description","dir":"","previous_headings":"","what":"Formal description","title":null,"text":"Optional components represented square brackets [...]. follows shortest standard-conforming program (see example2.f90): program-name present, must beginning end, must places. return contains statement context modules.","code":"[ program [program-name] ]      [ specification-part ]      [ exectuable-part ]   [ contains      internal-subprogram-part ]   end [program-name] end"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"general format format specifier (discussed later) output-item-list comma-separated list values/variables printed standard output. format * (-called free-format) implementation allowed apply default format given type item.","code":"print format [ , output-item-list ]"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Consider following program (available example3.f90): example shows general way provide output. also going employ use statement import symbol (intrinsic) module iso_fortran_env. symbol output_unit identifies default standard output (cf. stdout).","code":"program example3    use iso_fortran_env, only : output_unit    write (output_unit, *) \"Hello \", \"world\"  end program example3"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/aio.html","id":"use-statement","dir":"","previous_headings":"","what":"use statement","title":null,"text":"Formally, module-nature present, must either intrinsic non_intrinsic. implementation must provide certain intrinsic modules iso_fortran_env. formal namespace mechanism Fortran (cf. C++), restrictions symbols visible can made via optional -list. -list public symbols module-name visible.","code":"use [[ , module-nature] ::] module-name [ , only : [only-list]]"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/aio.html","id":"write-statement","dir":"","previous_headings":"","what":"write statement","title":null,"text":"Formally, output-item-list comma separated list items output. io-control-spec-list large number potential arguments (comma separated). formatted output, must include least unit number format: io-unit valid integer unit number, format format-specifier (print). Examples C programmers looking new-line like symbol notice none appeared far. default situation print write generate new-line automatically. * symbol context io-unit default output unit (usually screen). return write statement format-specifiers detail context /o external files.","code":"write (io-control-spec-list) [output-item-list] write ([unit = ] io-unit, [fmt = ] format) [output-item-list] write (unit = output_unit, fmt = *)   write (output_unit, *)   write (*, *)"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/aio.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Modern Fortran case sensitive. Older versions required capitals, style persisted present day places. may see things modern etiquette tends regard capitals shouting, can cause strain. addition, compiler accept mixed case, additional tool required enforce style (enforcement wanted). course therefore prefers lower-case style. version program available exercise1.f90.","code":"PROGRAM example1    PRINT *, \"Hello World\"  END PROGRAM example1"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/aio.html","id":"writing-your-first-program","dir":"","previous_headings":"","what":"Writing your first program","title":null,"text":"Write program prints actual values symbols output_unit, error_unit, input_unit (iso_fortran_env) screen. haven’t used clause use iso_fortran_env, add now. happens results miss one symbols referenced clause? behaviour explained following section.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Fortran program made one statements separated line breaks Comments declared ! may trail statements","code":""},{"path":[]},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":null,"text":"Learners must familiar basic concepts programming: variables, logic, flow control, loops, functions . knowledge Fortran assumed. Previous programming experience might typically context C/C++ python. know programming, suggest course Fortran place start.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/index.html","id":"headingSolution1","dir":"","previous_headings":"","what":null,"title":null,"text":"Download zip file unzip Desktop check git repository. file contains data skeleton code use throughout course. details log archer2 account, see archer2 quickstart guide link. default Fortran compiler archer2 Cray Fortran compiler invoked using ftn. example, generate executable default name .. taking course archer2 recommend installing GFortran compiler.","code":"$ cd section1.01 $ ftn example1.f90"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/index.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Download zip file unzip Desktop check git repository. file contains data skeleton code use throughout course.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/index.html","id":"headingSolution1","dir":"","previous_headings":"","what":null,"title":null,"text":"details log archer2 account, see archer2 quickstart guide link. default Fortran compiler archer2 Cray Fortran compiler invoked using ftn. example, generate executable default name .. taking course archer2 recommend installing GFortran compiler.","code":"$ cd section1.01 $ ftn example1.f90"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/index.html","id":"details","dir":"","previous_headings":"","what":"Details","title":null,"text":"start course please ensure access Fortran compiler, necessary account archer2.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/404.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"seem find page looking . tips may help: try going back previous page navigate page using navigation bar left. URL ends /index.html, try removing . head home page lesson came link lesson, please contact lesson maintainers using links foot page.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/LICENSE.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Carpentries (Software Carpentry, Data Carpentry, Library Carpentry) instructional material made available Creative Commons Attribution license. following human-readable summary (substitute ) full legal text CC 4.0 license. free: Share—copy redistribute material medium format Adapt—remix, transform, build upon material purpose, even commercially. licensor revoke freedoms long follow license terms. following terms: Attribution—must give appropriate credit (mentioning work derived work Copyright (c) Carpentries , practical, linking https://carpentries.org/), provide link license, indicate changes made. may reasonable manner, way suggests licensor endorses use. additional restrictions—may apply legal terms technological measures legally restrict others anything license permits. understanding : Notices: comply license elements material public domain use permitted applicable exception limitation. warranties given. license may give permissions necessary intended use. example, rights publicity, privacy, moral rights may limit use material.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/LICENSE.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Except otherwise noted, example programs software provided Carpentries made available OSI-approved MIT license. Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/LICENSE.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"“Carpentries”, “Software Carpentry”, “Data Carpentry”, “Library Carpentry” respective logos registered trademarks Community Initiatives.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Content Introduction  Fortran? Understand Fortrans colourful history simple program might : Formally, Fortran program consists one lines made Fortran statements. Line breaks significant (e.g., semi-colons ; required ). Comments introduced exclamation mark !, may trail statements. program statement roughly equivalent job main() C/C++. However, note (must ) return statement. Using ftn: general format format specifier (discussed later) output-item-list comma-separated list values/variables printed standard output. format * (-called free-format) implementation allowed apply default format given type item. Consider following program (available example3.f90): example shows general way provide output. also going employ use statement import symbol (intrinsic) module iso_fortran_env. symbol output_unit identifies default standard output (cf. stdout). Modern Fortran case sensitive. Older versions required capitals, style persisted present day places. may see things modern etiquette tends regard capitals shouting, can cause strain. addition, compiler accept mixed case, additional tool required enforce style (enforcement wanted). course therefore prefers lower-case style. version program available exercise1.f90.","code":"program example1    ! An example program prints \"Hello World\" to the screen    print * , \"Hello World\"  end program example1 $ something something something print format [ , output-item-list ] program example3    use iso_fortran_env, only : output_unit    write (output_unit, *) \"Hello \", \"world\"  end program example3 PROGRAM example1    PRINT *, \"Hello World\"  END PROGRAM example1"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"simple program might : Formally, Fortran program consists one lines made Fortran statements. Line breaks significant (e.g., semi-colons ; required ). Comments introduced exclamation mark !, may trail statements. program statement roughly equivalent job main() C/C++. However, note (must ) return statement. Using ftn:","code":"program example1    ! An example program prints \"Hello World\" to the screen    print * , \"Hello World\"  end program example1 $ something something something"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/aio.html","id":"compiling-your-first-program","dir":"Instructor","previous_headings":"","what":"Compiling your first program","title":null,"text":"Check now can compile run first example program example1.f90.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/aio.html","id":"formal-description","dir":"Instructor","previous_headings":"","what":"Formal description","title":null,"text":"Optional components represented square brackets [...]. follows shortest standard-conforming program (see example2.f90): program-name present, must beginning end, must places. return contains statement context modules.","code":"[ program [program-name] ]      [ specification-part ]      [ exectuable-part ]   [ contains      internal-subprogram-part ]   end [program-name] end"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"general format format specifier (discussed later) output-item-list comma-separated list values/variables printed standard output. format * (-called free-format) implementation allowed apply default format given type item.","code":"print format [ , output-item-list ]"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Consider following program (available example3.f90): example shows general way provide output. also going employ use statement import symbol (intrinsic) module iso_fortran_env. symbol output_unit identifies default standard output (cf. stdout).","code":"program example3    use iso_fortran_env, only : output_unit    write (output_unit, *) \"Hello \", \"world\"  end program example3"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/aio.html","id":"use-statement","dir":"Instructor","previous_headings":"","what":"use statement","title":null,"text":"Formally, module-nature present, must either intrinsic non_intrinsic. implementation must provide certain intrinsic modules iso_fortran_env. formal namespace mechanism Fortran (cf. C++), restrictions symbols visible can made via optional -list. -list public symbols module-name visible.","code":"use [[ , module-nature] ::] module-name [ , only : [only-list]]"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/aio.html","id":"write-statement","dir":"Instructor","previous_headings":"","what":"write statement","title":null,"text":"Formally, output-item-list comma separated list items output. io-control-spec-list large number potential arguments (comma separated). formatted output, must include least unit number format: io-unit valid integer unit number, format format-specifier (print). Examples C programmers looking new-line like symbol notice none appeared far. default situation print write generate new-line automatically. * symbol context io-unit default output unit (usually screen). return write statement format-specifiers detail context /o external files.","code":"write (io-control-spec-list) [output-item-list] write ([unit = ] io-unit, [fmt = ] format) [output-item-list] write (unit = output_unit, fmt = *)   write (output_unit, *)   write (*, *)"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Modern Fortran case sensitive. Older versions required capitals, style persisted present day places. may see things modern etiquette tends regard capitals shouting, can cause strain. addition, compiler accept mixed case, additional tool required enforce style (enforcement wanted). course therefore prefers lower-case style. version program available exercise1.f90.","code":"PROGRAM example1    PRINT *, \"Hello World\"  END PROGRAM example1"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/aio.html","id":"writing-your-first-program","dir":"Instructor","previous_headings":"","what":"Writing your first program","title":null,"text":"Write program prints actual values symbols output_unit, error_unit, input_unit (iso_fortran_env) screen. haven’t used clause use iso_fortran_env, add now. happens results miss one symbols referenced clause? behaviour explained following section.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Fortran program made one statements separated line breaks Comments declared ! may trail statements","code":""},{"path":[]},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/index.html","id":"prerequisites","dir":"Instructor","previous_headings":"","what":"Prerequisites","title":null,"text":"Learners must familiar basic concepts programming: variables, logic, flow control, loops, functions . knowledge Fortran assumed. Previous programming experience might typically context C/C++ python. know programming, suggest course Fortran place start.","code":""},{"path":[]},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/index.html","id":"headingSolution1","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Download zip file unzip Desktop check git repository. file contains data skeleton code use throughout course. details log archer2 account, see archer2 quickstart guide link. default Fortran compiler archer2 Cray Fortran compiler invoked using ftn. example, generate executable default name .. taking course archer2 recommend installing GFortran compiler.","code":"$ cd section1.01 $ ftn example1.f90"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/index.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Download zip file unzip Desktop check git repository. file contains data skeleton code use throughout course.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/index.html","id":"headingSolution1","dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"details log archer2 account, see archer2 quickstart guide link. default Fortran compiler archer2 Cray Fortran compiler invoked using ftn. example, generate executable default name .. taking course archer2 recommend installing GFortran compiler.","code":"$ cd section1.01 $ ftn example1.f90"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/index.html","id":"details","dir":"Instructor","previous_headings":"","what":"Details","title":null,"text":"start course please ensure access Fortran compiler, necessary account archer2.","code":""},{"path":[]},{"path":[]},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/introduction.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"simple program might : Formally, Fortran program consists one lines made Fortran statements. Line breaks significant (e.g., semi-colons ; required ). Comments introduced exclamation mark !, may trail statements. program statement roughly equivalent job main() C/C++. However, note (must ) return statement. Using ftn:","code":"program example1    ! An example program prints \"Hello World\" to the screen    print * , \"Hello World\"  end program example1 $ something something something"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/introduction.html","id":"compiling-your-first-program","dir":"Instructor","previous_headings":"","what":"Compiling your first program","title":null,"text":"Check now can compile run first example program example1.f90.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/introduction.html","id":"formal-description","dir":"Instructor","previous_headings":"","what":"Formal description","title":null,"text":"Optional components represented square brackets [...]. follows shortest standard-conforming program (see example2.f90): program-name present, must beginning end, must places. return contains statement context modules.","code":"[ program [program-name] ]      [ specification-part ]      [ exectuable-part ]   [ contains      internal-subprogram-part ]   end [program-name] end"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/introduction.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"general format format specifier (discussed later) output-item-list comma-separated list values/variables printed standard output. format * (-called free-format) implementation allowed apply default format given type item.","code":"print format [ , output-item-list ]"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/introduction.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Consider following program (available example3.f90): example shows general way provide output. also going employ use statement import symbol (intrinsic) module iso_fortran_env. symbol output_unit identifies default standard output (cf. stdout).","code":"program example3    use iso_fortran_env, only : output_unit    write (output_unit, *) \"Hello \", \"world\"  end program example3"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/introduction.html","id":"use-statement","dir":"Instructor","previous_headings":"","what":"use statement","title":null,"text":"Formally, module-nature present, must either intrinsic non_intrinsic. implementation must provide certain intrinsic modules iso_fortran_env. formal namespace mechanism Fortran (cf. C++), restrictions symbols visible can made via optional -list. -list public symbols module-name visible.","code":"use [[ , module-nature] ::] module-name [ , only : [only-list]]"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/introduction.html","id":"write-statement","dir":"Instructor","previous_headings":"","what":"write statement","title":null,"text":"Formally, output-item-list comma separated list items output. io-control-spec-list large number potential arguments (comma separated). formatted output, must include least unit number format: io-unit valid integer unit number, format format-specifier (print). Examples C programmers looking new-line like symbol notice none appeared far. default situation print write generate new-line automatically. * symbol context io-unit default output unit (usually screen). return write statement format-specifiers detail context /o external files.","code":"write (io-control-spec-list) [output-item-list] write ([unit = ] io-unit, [fmt = ] format) [output-item-list] write (unit = output_unit, fmt = *)   write (output_unit, *)   write (*, *)"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/introduction.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"Modern Fortran case sensitive. Older versions required capitals, style persisted present day places. may see things modern etiquette tends regard capitals shouting, can cause strain. addition, compiler accept mixed case, additional tool required enforce style (enforcement wanted). course therefore prefers lower-case style. version program available exercise1.f90.","code":"PROGRAM example1    PRINT *, \"Hello World\"  END PROGRAM example1"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/introduction.html","id":"writing-your-first-program","dir":"Instructor","previous_headings":"","what":"Writing your first program","title":null,"text":"Write program prints actual values symbols output_unit, error_unit, input_unit (iso_fortran_env) screen. haven’t used clause use iso_fortran_env, add now. happens results miss one symbols referenced clause? behaviour explained following section.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/introduction.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Fortran program made one statements separated line breaks Comments declared ! may trail statements","code":""},{"path":[]},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/reference.html","id":null,"dir":"Instructor","previous_headings":"","what":null,"title":null,"text":"placeholder file. Please add content .","code":""},{"path":[]},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/introduction.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"simple program might : Formally, Fortran program consists one lines made Fortran statements. Line breaks significant (e.g., semi-colons ; required ). Comments introduced exclamation mark !, may trail statements. program statement roughly equivalent job main() C/C++. However, note (must ) return statement. Using ftn:","code":"program example1    ! An example program prints \"Hello World\" to the screen    print * , \"Hello World\"  end program example1 $ something something something"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/introduction.html","id":"compiling-your-first-program","dir":"","previous_headings":"","what":"Compiling your first program","title":null,"text":"Check now can compile run first example program example1.f90.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/introduction.html","id":"formal-description","dir":"","previous_headings":"","what":"Formal description","title":null,"text":"Optional components represented square brackets [...]. follows shortest standard-conforming program (see example2.f90): program-name present, must beginning end, must places. return contains statement context modules.","code":"[ program [program-name] ]      [ specification-part ]      [ exectuable-part ]   [ contains      internal-subprogram-part ]   end [program-name] end"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/introduction.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"general format format specifier (discussed later) output-item-list comma-separated list values/variables printed standard output. format * (-called free-format) implementation allowed apply default format given type item.","code":"print format [ , output-item-list ]"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/introduction.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Consider following program (available example3.f90): example shows general way provide output. also going employ use statement import symbol (intrinsic) module iso_fortran_env. symbol output_unit identifies default standard output (cf. stdout).","code":"program example3    use iso_fortran_env, only : output_unit    write (output_unit, *) \"Hello \", \"world\"  end program example3"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/introduction.html","id":"use-statement","dir":"","previous_headings":"","what":"use statement","title":null,"text":"Formally, module-nature present, must either intrinsic non_intrinsic. implementation must provide certain intrinsic modules iso_fortran_env. formal namespace mechanism Fortran (cf. C++), restrictions symbols visible can made via optional -list. -list public symbols module-name visible.","code":"use [[ , module-nature] ::] module-name [ , only : [only-list]]"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/introduction.html","id":"write-statement","dir":"","previous_headings":"","what":"write statement","title":null,"text":"Formally, output-item-list comma separated list items output. io-control-spec-list large number potential arguments (comma separated). formatted output, must include least unit number format: io-unit valid integer unit number, format format-specifier (print). Examples C programmers looking new-line like symbol notice none appeared far. default situation print write generate new-line automatically. * symbol context io-unit default output unit (usually screen). return write statement format-specifiers detail context /o external files.","code":"write (io-control-spec-list) [output-item-list] write ([unit = ] io-unit, [fmt = ] format) [output-item-list] write (unit = output_unit, fmt = *)   write (output_unit, *)   write (*, *)"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/introduction.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"Modern Fortran case sensitive. Older versions required capitals, style persisted present day places. may see things modern etiquette tends regard capitals shouting, can cause strain. addition, compiler accept mixed case, additional tool required enforce style (enforcement wanted). course therefore prefers lower-case style. version program available exercise1.f90.","code":"PROGRAM example1    PRINT *, \"Hello World\"  END PROGRAM example1"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/introduction.html","id":"writing-your-first-program","dir":"","previous_headings":"","what":"Writing your first program","title":null,"text":"Write program prints actual values symbols output_unit, error_unit, input_unit (iso_fortran_env) screen. haven’t used clause use iso_fortran_env, add now. happens results miss one symbols referenced clause? behaviour explained following section.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/introduction.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Fortran program made one statements separated line breaks Comments declared ! may trail statements","code":""},{"path":[]},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/reference.html","id":null,"dir":"","previous_headings":"","what":null,"title":null,"text":"placeholder file. Please add content .","code":""}]
