[{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/aio.html","id":"compiling-your-first-program","dir":"","previous_headings":"","what":"Compiling your first program","title":null,"text":"Check now can compile run first example program example1.f90.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/aio.html","id":"formal-description","dir":"","previous_headings":"","what":"Formal description","title":null,"text":"Optional components represented square brackets [...]. follows shortest standard-conforming program (see example2.f90): program-name present, must beginning end, must places. return contains statement context modules.","code":"[ program [program-name] ]      [ specification-part ]      [ exectuable-part ]   [ contains      internal-subprogram-part ]   end [program-name] end"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/aio.html","id":"use-statement","dir":"","previous_headings":"","what":"use statement","title":null,"text":"Formally, module-nature present, must either intrinsic non_intrinsic. implementation must provide certain intrinsic modules iso_fortran_env. formal namespace mechanism Fortran (cf. C++), restrictions symbols visible can made via optional -list. -list public symbols module-name visible.","code":"use [[ , module-nature] ::] module-name [ , only : [only-list]]"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/aio.html","id":"write-statement","dir":"","previous_headings":"","what":"write statement","title":null,"text":"Formally, output-item-list comma separated list items output. io-control-spec-list large number potential arguments (comma separated). formatted output, must include least unit number format: io-unit valid integer unit number, format format-specifier (print). Examples C programmers looking new-line like symbol notice none appeared far. default situation print write generate new-line automatically. * symbol context io-unit default output unit (usually screen). return write statement format-specifiers detail context /o external files.","code":"write (io-control-spec-list) [output-item-list] write ([unit = ] io-unit, [fmt = ] format) [output-item-list] write (unit = output_unit, fmt = *)   write (output_unit, *)   write (*, *)"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/aio.html","id":"writing-your-first-program","dir":"","previous_headings":"","what":"Writing your first program","title":null,"text":"Write program prints actual values symbols output_unit, error_unit, input_unit (iso_fortran_env) screen. haven’t used clause use iso_fortran_env, add now. happens results miss one symbols referenced clause? behaviour explained following section.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/aio.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Fortran program made one statements separated line breaks Comments declared ! may trail statements","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/index.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":null,"text":"Learners must familiar basic concepts programming: variables, logic, flow control, loops, functions . knowledge Fortran assumed. Previous programming experience might typically context C/C++ python. know programming, suggest course Fortran place start.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/index.html","id":"details","dir":"","previous_headings":"","what":"Details","title":null,"text":"start course please ensure access Fortran compiler, necessary account archer2.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/aio.html","id":"compiling-your-first-program","dir":"Instructor","previous_headings":"","what":"Compiling your first program","title":null,"text":"Check now can compile run first example program example1.f90.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/aio.html","id":"formal-description","dir":"Instructor","previous_headings":"","what":"Formal description","title":null,"text":"Optional components represented square brackets [...]. follows shortest standard-conforming program (see example2.f90): program-name present, must beginning end, must places. return contains statement context modules.","code":"[ program [program-name] ]      [ specification-part ]      [ exectuable-part ]   [ contains      internal-subprogram-part ]   end [program-name] end"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/aio.html","id":"use-statement","dir":"Instructor","previous_headings":"","what":"use statement","title":null,"text":"Formally, module-nature present, must either intrinsic non_intrinsic. implementation must provide certain intrinsic modules iso_fortran_env. formal namespace mechanism Fortran (cf. C++), restrictions symbols visible can made via optional -list. -list public symbols module-name visible.","code":"use [[ , module-nature] ::] module-name [ , only : [only-list]]"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/aio.html","id":"write-statement","dir":"Instructor","previous_headings":"","what":"write statement","title":null,"text":"Formally, output-item-list comma separated list items output. io-control-spec-list large number potential arguments (comma separated). formatted output, must include least unit number format: io-unit valid integer unit number, format format-specifier (print). Examples C programmers looking new-line like symbol notice none appeared far. default situation print write generate new-line automatically. * symbol context io-unit default output unit (usually screen). return write statement format-specifiers detail context /o external files.","code":"write (io-control-spec-list) [output-item-list] write ([unit = ] io-unit, [fmt = ] format) [output-item-list] write (unit = output_unit, fmt = *)   write (output_unit, *)   write (*, *)"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/aio.html","id":"writing-your-first-program","dir":"Instructor","previous_headings":"","what":"Writing your first program","title":null,"text":"Write program prints actual values symbols output_unit, error_unit, input_unit (iso_fortran_env) screen. haven’t used clause use iso_fortran_env, add now. happens results miss one symbols referenced clause? behaviour explained following section.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/aio.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Fortran program made one statements separated line breaks Comments declared ! may trail statements","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/index.html","id":"prerequisites","dir":"Instructor","previous_headings":"","what":"Prerequisites","title":null,"text":"Learners must familiar basic concepts programming: variables, logic, flow control, loops, functions . knowledge Fortran assumed. Previous programming experience might typically context C/C++ python. know programming, suggest course Fortran place start.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/index.html","id":"details","dir":"Instructor","previous_headings":"","what":"Details","title":null,"text":"start course please ensure access Fortran compiler, necessary account archer2.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/introduction.html","id":"compiling-your-first-program","dir":"Instructor","previous_headings":"","what":"Compiling your first program","title":null,"text":"Check now can compile run first example program example1.f90.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/introduction.html","id":"formal-description","dir":"Instructor","previous_headings":"","what":"Formal description","title":null,"text":"Optional components represented square brackets [...]. follows shortest standard-conforming program (see example2.f90): program-name present, must beginning end, must places. return contains statement context modules.","code":"[ program [program-name] ]      [ specification-part ]      [ exectuable-part ]   [ contains      internal-subprogram-part ]   end [program-name] end"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/introduction.html","id":"use-statement","dir":"Instructor","previous_headings":"","what":"use statement","title":null,"text":"Formally, module-nature present, must either intrinsic non_intrinsic. implementation must provide certain intrinsic modules iso_fortran_env. formal namespace mechanism Fortran (cf. C++), restrictions symbols visible can made via optional -list. -list public symbols module-name visible.","code":"use [[ , module-nature] ::] module-name [ , only : [only-list]]"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/introduction.html","id":"write-statement","dir":"Instructor","previous_headings":"","what":"write statement","title":null,"text":"Formally, output-item-list comma separated list items output. io-control-spec-list large number potential arguments (comma separated). formatted output, must include least unit number format: io-unit valid integer unit number, format format-specifier (print). Examples C programmers looking new-line like symbol notice none appeared far. default situation print write generate new-line automatically. * symbol context io-unit default output unit (usually screen). return write statement format-specifiers detail context /o external files.","code":"write (io-control-spec-list) [output-item-list] write ([unit = ] io-unit, [fmt = ] format) [output-item-list] write (unit = output_unit, fmt = *)   write (output_unit, *)   write (*, *)"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/introduction.html","id":"writing-your-first-program","dir":"Instructor","previous_headings":"","what":"Writing your first program","title":null,"text":"Write program prints actual values symbols output_unit, error_unit, input_unit (iso_fortran_env) screen. haven’t used clause use iso_fortran_env, add now. happens results miss one symbols referenced clause? behaviour explained following section.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/instructor/introduction.html","id":null,"dir":"Instructor","previous_headings":"","what":"Keypoints","title":null,"text":"Fortran program made one statements separated line breaks Comments declared ! may trail statements","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/introduction.html","id":"compiling-your-first-program","dir":"","previous_headings":"","what":"Compiling your first program","title":null,"text":"Check now can compile run first example program example1.f90.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/introduction.html","id":"formal-description","dir":"","previous_headings":"","what":"Formal description","title":null,"text":"Optional components represented square brackets [...]. follows shortest standard-conforming program (see example2.f90): program-name present, must beginning end, must places. return contains statement context modules.","code":"[ program [program-name] ]      [ specification-part ]      [ exectuable-part ]   [ contains      internal-subprogram-part ]   end [program-name] end"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/introduction.html","id":"use-statement","dir":"","previous_headings":"","what":"use statement","title":null,"text":"Formally, module-nature present, must either intrinsic non_intrinsic. implementation must provide certain intrinsic modules iso_fortran_env. formal namespace mechanism Fortran (cf. C++), restrictions symbols visible can made via optional -list. -list public symbols module-name visible.","code":"use [[ , module-nature] ::] module-name [ , only : [only-list]]"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/introduction.html","id":"write-statement","dir":"","previous_headings":"","what":"write statement","title":null,"text":"Formally, output-item-list comma separated list items output. io-control-spec-list large number potential arguments (comma separated). formatted output, must include least unit number format: io-unit valid integer unit number, format format-specifier (print). Examples C programmers looking new-line like symbol notice none appeared far. default situation print write generate new-line automatically. * symbol context io-unit default output unit (usually screen). return write statement format-specifiers detail context /o external files.","code":"write (io-control-spec-list) [output-item-list] write ([unit = ] io-unit, [fmt = ] format) [output-item-list] write (unit = output_unit, fmt = *)   write (output_unit, *)   write (*, *)"},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/introduction.html","id":"writing-your-first-program","dir":"","previous_headings":"","what":"Writing your first program","title":null,"text":"Write program prints actual values symbols output_unit, error_unit, input_unit (iso_fortran_env) screen. haven’t used clause use iso_fortran_env, add now. happens results miss one symbols referenced clause? behaviour explained following section.","code":""},{"path":"‘https:www.astropython.com/intro-to-modern-fortran’/introduction.html","id":null,"dir":"","previous_headings":"","what":"Keypoints","title":null,"text":"Fortran program made one statements separated line breaks Comments declared ! may trail statements","code":""}]
